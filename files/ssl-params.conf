## Strong SSL Security
## https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html & https://cipherli.st/
#ssl on;
# use strong TLS ciphers
ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305";
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 1d;
ssl_ecdh_curve X25519:prime256v1:secp384r1;

# verify client by querying ca (need to import ca cert)
#ssl_verify_client on;

# Enable TLSv1.3's 0-RTT. Use $ssl_early_data when reverse proxying to
# prevent replay attacks.
#
# @see: https://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_early_data
ssl_early_data on;
add_header X-Early-Data $ssl_early_data;

# HSTS: HTTP Strict Transport Security (HSTS)
# Allows web servers to declare that web browsers (or other complying user agents) 
# should automatically interact with it using only HTTPS connections  
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains;" always;

## [Optional] Generate a stronger DHE parameter:
##  sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096
#
ssl_dhparam /etc/ssl/certs/dhparam.pem;

# OCSP stapling disable as it is useless and may leave to privacy issues
# Use instead CRL when it come out:
# https://letsencrypt.org/2024/07/23/replacing-ocsp-with-crls/

# Note: You should disable gzip for SSL traffic.
# See: https://bugs.debian.org/773332
#
# Read up on ssl_ciphers to ensure a secure configuration.
# See: https://bugs.debian.org/765782
#
# Self signed certs generated by the ssl-cert package
# Don't use them in a production server!
